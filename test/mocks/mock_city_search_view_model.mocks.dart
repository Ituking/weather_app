// Mocks generated by Mockito 5.4.4 from annotations
// in weather_app/test/mocks/mock_city_search_view_model.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_riverpod/flutter_riverpod.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_app/view_model/city_search_state.dart' as _i3;
import 'package:weather_app/view_model/city_search_view_model.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNotifierProviderRef_0<T> extends _i1.SmartFake
    implements _i2.NotifierProviderRef<T> {
  _FakeNotifierProviderRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCitySearchState_1 extends _i1.SmartFake
    implements _i3.CitySearchState {
  _FakeCitySearchState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CitySearchViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockCitySearchViewModel extends _i1.Mock
    implements _i4.CitySearchViewModel {
  MockCitySearchViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NotifierProviderRef<_i3.CitySearchState> get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeNotifierProviderRef_0<_i3.CitySearchState>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.NotifierProviderRef<_i3.CitySearchState>);

  @override
  _i3.CitySearchState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeCitySearchState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.CitySearchState);

  @override
  set state(_i3.CitySearchState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.CitySearchState build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _FakeCitySearchState_1(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
      ) as _i3.CitySearchState);

  @override
  void updateCityName(String? cityName) => super.noSuchMethod(
        Invocation.method(
          #updateCityName,
          [cityName],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> fetchWeather() => (super.noSuchMethod(
        Invocation.method(
          #fetchWeather,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void navigateToResultScreen(String? cityName) => super.noSuchMethod(
        Invocation.method(
          #navigateToResultScreen,
          [cityName],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setState(_i3.CitySearchState? newState) => super.noSuchMethod(
        Invocation.method(
          #setState,
          [newState],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void listenSelf(
    void Function(
      _i3.CitySearchState?,
      _i3.CitySearchState,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #listenSelf,
          [listener],
          {#onError: onError},
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    _i3.CitySearchState? previous,
    _i3.CitySearchState? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
      ) as bool);
}
